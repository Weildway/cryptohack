from Crypto.Util.number import long_to_bytes

n = 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995888017731426634845808624796292507989171497629109450825818587383112280639037484593490692935998202437639626747133650990603333094513531505209954273004473567193235535061942991750932725808679249964667090723480397916715320876867803719301313440005075056481203859010490836599717523664197112053206745235908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
e = 16
ct = 11303174761894431146735697569489134747234975144162172162401674567273034831391936916397234068346115459134602443963604063679379285919302225719050193590179240191429612072131629779948379821039610415099784351073443218911356328815458050694493726951231241096695626477586428880220528001269746547018741237131741255022371957489462380305100634600499204435763201371188769446054925748151987175656677342779043435047048130599123081581036362712208692748034620245590448762406543804069935873123161582756799517226666835316588896306926659321054276507714414876684738121421124177324568084533020088172040422767194971217814466953837590498718


def legendre(a, p):
    return pow(a, (p - 1) // 2, p)


def tonelli(n, p):
    # Check that n is indeed a square: (n | p) must be ≡ 1
    assert legendre(n, p) == 1, "not a square (mod p)"
    q = p - 1
    s = 0
    # By factoring out powers of 2 from p - 1, find q and s such that p - 1 = (q^2)s with q odd
    while q % 2 == 0:
        q //= 2
        s += 1
    if s == 1:
        return pow(n, (p + 1) // 4, p)
    # Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for z in range(2, p):
        if p - 1 == legendre(z, p):
            break
    # Set r ≡ n^(q+1)/2, t ≡ n^q, m = s
    c = pow(z, q, p)
    r = pow(n, (q + 1) // 2, p)
    t = pow(n, q, p)
    m = s
    t2 = 0
    """
    Loop the following:
    -If t ≡ 1, output r and p - r .
    -Otherwise find, by repeated squaring, 
    the lowest i, 0 < i < m , such that t^2^i ≡ 1 .
    -Let b ≡ c^2^(m - i - 1), and set r ≡ rb, t ≡ tb^2, 
    c ≡ b^2 and m = i .
    """
    while (t - 1) % p != 0:
        t2 = (t * t) % p
        for i in range(1, m):
            if (t2 - 1) % p == 0:
                break
            t2 = (t2 * t2) % p
        b = pow(c, 1 << (m - i - 1), p)
        r = (r * b) % p
        c = (b * b) % p
        t = (t * c) % p
        m = i
    return r


def find_square_roots(ct, e):
    if e == 1:
        flag = long_to_bytes(ct)
        if b"crypto{" in flag:
            print(flag)
        return

    elif pow(ct, (n - 1) // 2, n) != 1:
        return

    else:
        rt1 = tonelli(ct, n)
        find_square_roots(rt1, e // 2)
        rt2 = n - rt1
        find_square_roots(rt2, e // 2)
    return


find_square_roots(ct, e)
